#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <math.h>
// RGB 컬러를 표현하는 구조체
typedef struct {
    unsigned char red;    // 0-255
    unsigned char green;  // 0-255
    unsigned char blue;   // 0-255
} RGBColor;
// 16진수 컬러 코드를 RGB로 변환
RGBColor hex_to_rgb(const char* hex_color) {
    RGBColor color = {0, 0, 0};
    const char* hex = hex_color[0] == '#' ? hex_color + 1 : hex_color; // # 제외
    unsigned int hex_value;
    sscanf(hex, "%x", &hex_value); // 16진수 문자열에서 값 추출
    color.red = (hex_value >> 16) & 0xFF;
    color.green = (hex_value >> 8) & 0xFF;
    color.blue = hex_value & 0xFF;
    return color;
}
// RGB를 16진수 문자열로 변환
void rgb_to_hex(RGBColor color, char* hex_out) {
    sprintf(hex_out, "#%02X%02X%02X", color.red, color.green, color.blue);
}
// RGB 색상 혼합
RGBColor mix_colors(RGBColor color1, RGBColor color2, float ratio) {
    RGBColor mixed;
    ratio = ratio > 1.0f ? 1.0f : ratio < 0.0f ? 0.0f : ratio;
    float inv_ratio = 1.0f - ratio;
    mixed.red = (unsigned char)(color1.red * ratio + color2.red * inv_ratio);
    mixed.green = (unsigned char)(color1.green * ratio + color2.green * inv_ratio);
    mixed.blue = (unsigned char)(color1.blue * ratio + color2.blue * inv_ratio);
    return mixed;
}
// 색상의 밝기 조절
RGBColor adjust_brightness(RGBColor color, float factor) {
    RGBColor adjusted;
    factor = factor < 0.0f ? 0.0f : factor;
    adjusted.red = (unsigned char)(color.red * factor > 255 ? 255 : color.red * factor);
    adjusted.green = (unsigned char)(color.green * factor > 255 ? 255 : color.green * factor);
    adjusted.blue = (unsigned char)(color.blue * factor > 255 ? 255 : color.blue * factor);
    return adjusted;
}
// 보색 생성
RGBColor get_complementary(RGBColor color) {
    RGBColor comp;
    comp.red = 255 - color.red;
    comp.green = 255 - color.green;
    comp.blue = 255 - color.blue;
    return comp;
}
// 색상 출력(콘솔)
void print_color_info(RGBColor color, const char* label) {
    char hex[8];
    rgb_to_hex(color, hex);
    printf("%s: RGB(%d, %d, %d) / %s\n",
           label, color.red, color.green, color.blue, hex);
}
// 그라데이션 생성
void generate_gradient(RGBColor start, RGBColor end, int steps) {
    printf("\n그라데이션 생성 (%d 단계):\n", steps);
    for (int i = 0; i < steps; i++) {
        float ratio = (float)i / (steps - 1);
        RGBColor gradient_color = mix_colors(start, end, ratio);
        char hex[8];
        rgb_to_hex(gradient_color, hex);
        printf("단계 %d: %s\n", i + 1, hex);
    }
}
int main() {
    // 기본 색상 생성
    int r, g, b;
    printf("빨간색의 값을 입력하세요 (0과 255 사이의 값): ");
    scanf("%d", &r);
    RGBColor red = {r, 0, 0};
    printf("초록색의 값을 입력하세요 (0과 255 사이의 값): ");
    scanf("%d", &g);
    RGBColor green = {0, g, 0};
    printf("파란색의 값을 입력하세요 (0과 255 사이의 값): ");
    scanf("%d", &b);
    RGBColor blue = {0, 0, b};
    printf("=== RGB 컬러 처리 프로그램 ===\n\n");
    // 16진수 변환 테스트
    print_color_info(red, "빨간색");
    print_color_info(green, "초록색");
    print_color_info(blue, "파란색");
    // 색상 혼합
    RGBColor mixed1 = mix_colors(red, green, 0.5f);
    RGBColor mixed = mix_colors(mixed1, blue, 0.5f);
    print_color_info(mixed, "혼합색");
    // 밝기 조절
    RGBColor bright_mixed = adjust_brightness(mixed, 1.5f);
    RGBColor dark_mixed = adjust_brightness(mixed, 0.5f);
    print_color_info(bright_mixed, "밝은 혼합색");
    print_color_info(dark_mixed, "어두운 혼합색");
    // 보색 생성
    RGBColor comp_mixed = get_complementary(mixed);
    print_color_info(comp_mixed, "혼합색의 보색");
    // 16진수 코드로부터 색상 생성
    RGBColor custom_color = hex_to_rgb("#1ABC9C");
    print_color_info(custom_color, "혼합색 (#1ABC9C)");
    // 그라데이션 생성
    printf("\n혼합색으로의 그라데이션:");
    generate_gradient(mixed1, blue, 5);
    return 0;
}

이 코드를 사용하면 제대로 작동한다.

직접 고친 코드가 자꾸 오류가 나서 ai의 도움을 받았다.
무엇이 문제인지 코멘트를 달아주시면 감사하겠습니다.

수정 전 코드 

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <math.h>
#include "문해프lab3.h"
// RGB 컬러를 표현하는구조체
typedef struct {
	unsigned char red;    // 0-255
	unsigned char green;  // 0-255
	unsigned char blue;   // 0-255
} RGBColor;
// 16진수 컬러 코드를RGB로변환
RGBColor hex_to_rgb(const char* hex_color) {
	RGBColor color = { 0, 0, 0 };
	// #을 제외하고시작하는경우를처리
	const char* hex = hex_color;
	if (hex[0] == '#') hex++;
	// 16진수 문자열을정수로변환
	unsigned int hex_value;
	scanf_s(hex, "%x", &hex_value);
	color.red = (hex_value >> 16) & 0xFF;
	color.green = (hex_value >> 8) & 0xFF;
	color.blue = hex_value & 0xFF;
	return color;
}
// RGB를 16진수 문자열로변환
void rgb_to_hex(RGBColor color, char* hex_out) {
	sprintf_s(hex_out, 8, "#%02X%02X%02X", color.red, color.green, color.blue);
}
// RGB 색상 혼합
RGBColor mix_colors(RGBColor color1, RGBColor color2, float ratio) {
	RGBColor mixed;
	ratio = ratio > 1.0f ? 1.0f : ratio < 0.0f ? 0.0f : ratio;
	float inv_ratio = 1.0f - ratio;
	mixed.red = (unsigned char)(color1.red * ratio + color2.red * inv_ratio);
	mixed.green = (unsigned char)(color1.green * ratio + color2.green * inv_ratio);
	mixed.blue = (unsigned char)(color1.blue * ratio + color2.blue * inv_ratio);
	return mixed;
}
// 색상의 밝기조절
RGBColor adjust_brightness(RGBColor color, float factor) {
	RGBColor adjusted;
	factor = factor < 0.0f ? 0.0f : factor;
	adjusted.red = (unsigned char)fmin(255, color.red * factor);
	adjusted.green = (unsigned char)fmin(255, color.green * factor);
	adjusted.blue = (unsigned char)fmin(255, color.blue * factor);
	return adjusted;
}
// 보색 생성
RGBColor get_complementary(RGBColor color) {
	RGBColor comp;
	comp.red = 255 - color.red;
	comp.green = 255 - color.green;
	comp.blue = 255 - color.blue;
	return comp;
}
// 색상 출력(콘솔)
void print_color_info(RGBColor color, const char* label) {
	char hex[8];
	rgb_to_hex(color, hex);
	printf("%s: RGB(%d, %d, %d) / %s\n",
		label, color.red, color.green, color.blue, hex);
}
// 그라데이션생성
void generate_gradient(RGBColor start, RGBColor end, int steps) {
	printf("\n그라데이션 생성 (%d 단계):\n", steps);
	for (int i = 0; i < steps; i++) {
		float ratio = (float)i / (steps - 1);
		RGBColor gradient_color = mix_colors(start, end, ratio);
		char hex[8];
		rgb_to_hex(gradient_color, hex);
		printf("단계 %d: %s\n", i + 1, hex);
	}
}
int main() {
	// 기본 색상생성
	int r, g, b;
	printf("빨간색의 값을 입력하세요(0과 255 사이의 값):");
	scanf("%d", &r);
	RGBColor red = { r, 0, 0 };
	printf("초록색의 값을 입력하세요(0과 255 사이의 값):");
	scanf("%d", &g);
	RGBColor green = { 0, g, 0 };
	printf("파란색의 값을 입력하세요(0과 255 사이의 값):");
	scanf("%d", &b);
	RGBColor blue = { 0, 0, b};
	printf("=== RGB 컬러 처리 프로그램 ===\n\n");
	// 16진수 변환 테스트
	print_color_info(red, "빨간색");
	print_color_info(blue, "파란색");
	print_color_info(green, "초록색");
	// 색상 혼합
	RGBColor mixed1 = mix_colors(red, green, 0.5f);
	RGBColor mixed = mix_colors(mixed1, blue, 0.5f);
	print_color_info(mixed, "혼합색");
	// 밝기 조절
	RGBColor bright_mixed = adjust_brightness(mixed, 1.5f);
	RGBColor dark_mixed = adjust_brightness(mixed, 0.5f);
	print_color_info(bright_mixed, "밝은 혼합색");
	print_color_info(dark_mixed, "어두운 혼합색");
	// 보색 생성
	RGBColor comp_mixed = get_complementary(mixed);
	print_color_info(comp_mixed, "혼합색의 보색");
	// 16진수 코드로부터색상생성
	RGBColor custom_color = hex_to_rgb("#1ABC9C");
	print_color_info(custom_color, "혼합색 (#1ABC9C)");
	// 그라데이션생성
	printf("\n혼합색으로의 그라데이션:");
	generate_gradient(mixed1, blue, 5);
	return 0;
 }
